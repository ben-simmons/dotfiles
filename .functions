#!/usr/bin/env bash

###############################################################################
# General                                                                     #
###############################################################################
# Simple calculator
calc() {
  local result=""
  result="$(printf "scale=10;%s\\n" "$*" | bc --mathlib | tr -d '\\\n')"
  #	          └─ default (when `--mathlib` is used) is 20

  if [[ "$result" == *.* ]]; then
    # improve the output for decimal numbers
    # add "0" for cases like ".5"
    # add "0" for cases like "-.5"
    # remove trailing zeros
    printf "%s" "$result" |
      sed -e 's/^\./0./'  \
      -e 's/^-\./-0./' \
      -e 's/0*$//;s/\.$//'
  else
    printf "%s" "$result"
  fi
  printf "\\n"
}

# Create a new directory and enter it
mkd() {
  mkdir -p "$@"
  cd "$@" || exit
}

# Make a temporary directory and enter it
tmpd() {
  local dir
  if [ $# -eq 0 ]; then
    dir=$(mktemp -d)
  else
    dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
  fi
  cd "$dir" || exit
}

# Determine size of a file or total size of a directory
fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  # shellcheck disable=SC2199
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg -- .[^.]* *
  fi
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
json() {
  if [ -t 0 ]; then # argument
    python -mjson.tool <<< "$*" | pygmentize -l javascript -O "style=${ZSH_COLORIZE_STYLE}"
  else # pipe
    python -mjson.tool | pygmentize -l javascript -O "style=${ZSH_COLORIZE_STYLE}"
  fi
}

# Print the $PATH variable in lines
path() {
  echo "${PATH//:/\n}"
}

# Quick upward "cd .." for given number of levels
up() {
  # default parameter to 1 if non provided
  declare -i d=${@:-1}
  # ensure given parameter is non-negative. Print error and return if it is
  (( $d < 0 )) && (>&2 echo "up: Error: negative value provided") && return 1;
  # remove last d directories from pwd, append "/" in case result is empty
  cd "$(pwd | sed -E 's;(/[^/]*){0,'$d'}$;;')/";
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
# Based on code here: https://github.com/mathiasbynens/dotfiles/blob/main/.functions
tre() {
  tree -aC -I '.git|.idea|.venv|bower_components|node_modules' --dirsfirst "$@" | less -FRNX;
}


###############################################################################
# Security                                                                    #
###############################################################################
# Get the password for a particular key stored on the MacOS keychain
password() {
  security find-generic-password -a "$1" -g
}


###############################################################################
# Network                                                                     #
###############################################################################
# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
certnames() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified.";
    return 1;
  fi;

  local domain="${1}";
  echo "Testing ${domain}…";
  echo ""; # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
    | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" \
      | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
      no_serial, no_sigdump, no_signame, no_validity, no_version");
    echo "Common Name:";
    echo ""; # newline
    echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
    echo ""; # newline
    echo "Subject Alternative Name(s):";
    echo ""; # newline
    echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
      | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
    return 0;
  else
    echo "ERROR: Certificate not found.";
    return 1;
  fi;
}

# What's running on given port
port() {
  lsof -i :"$1"
}

# Show http traffic via ngrep
# Usage:
#   sniff
#   sniff en0
sniff() {
  if [ $# -eq 0 ]; then
    sudo ngrep -d "$(whichif)" -t '^(GET|POST) ' 'tcp and port 80'
  else
    sudo ngrep -d "$1" -t '^(GET|POST) ' 'tcp and port 80'
  fi
}

# Show all network traffic
# Usage:
#   traffic
#   traffic en0
traffic() {
  if [ $# -eq 0 ]; then
    sudo tshark -i "$(whichif)"
  else
    sudo tshark -i "$1"
  fi
}

# Which network interface is active
whichif() {
  # Based on code here:
  # https://superuser.com/questions/89994/how-can-i-tell-which-network-interface-my-computer-is-using/627581#627581
  iface=$(route -n get 0.0.0.0 2>/dev/null | awk '/interface: / {print $2}')
  if [ -n "$iface" ]; then
      echo "$iface"
  else
      echo "null"
  fi
}

# Connected wifi network name and password
wifi() {
  local ssid pw
  ssid=$(/System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport -I | awk -F': ' '/ SSID/{print $2}')
  pw=$(security find-generic-password -wa ${ssid})
  echo "$ssid\n$pw"
}


###############################################################################
# Servers                                                                     #
###############################################################################

# Start a simple local file server
server() {
    local PORT=${1:-8000}  # Default to port 8000 if not specified

    # Kill any process using the port
    local PID=$(lsof -ti :$PORT)
    if [[ -n "$PID" ]]; then
        echo "Port $PORT is in use. Killing process $PID..."
        kill -9 $PID
        sleep 1  # Give time for the port to release
    fi

    # Start Python HTTP server in the background
    echo "Starting Python HTTP server on port $PORT..."
    python3 -m http.server $PORT &

    # Get the new process ID
    SERVER_PID=$!
    echo "Server started with PID $SERVER_PID"

    # Trap Ctrl+C to stop the server
    trap "echo 'Stopping server...'; kill -9 $SERVER_PID; echo 'Port $PORT freed.'; exit 0" SIGINT

    # Keep the script running so Ctrl+C works properly
    wait $SERVER_PID
}

# Start a simple local file server and expose it with localtunnel
server_tunnel() {
    local PORT=${1:-8000}  # Default to port 8000 if not specified
    local SUBDOMAIN=${2:-""}  # Optional subdomain

    # Kill any process using the port
    local PID=$(lsof -ti :$PORT)
    if [[ -n "$PID" ]]; then
        echo "Port $PORT is in use. Killing process $PID..."
        kill -9 $PID
        sleep 1  # Give time for the port to release
    fi

    # Start the Python HTTP server in the background
    echo "Starting Python HTTP server on port $PORT..."
    python3 -m http.server $PORT &

    # Get the new process ID
    SERVER_PID=$!
    echo "Server started with PID $SERVER_PID"

    # Wait briefly to ensure the server starts
    sleep 2

    # Start localtunnel
    if [[ -n "$SUBDOMAIN" ]]; then
        echo "Starting localtunnel on port $PORT with subdomain '$SUBDOMAIN'..."
        lt --port $PORT --subdomain "$SUBDOMAIN" &
    else
        echo "Starting localtunnel on port $PORT..."
        lt --port $PORT &
    fi

    # Get the localtunnel process ID
    TUNNEL_PID=$!
    echo "Localtunnel started with PID $TUNNEL_PID"
    echo "your ip is: $(publicip)"

    # Trap Ctrl+C to stop both processes
    trap "echo 'Stopping server and tunnel...'; kill -9 $SERVER_PID $TUNNEL_PID; echo 'Port $PORT freed.'; exit 0" SIGINT

    # Keep script running so Ctrl+C works properly
    wait $SERVER_PID
}


###############################################################################
# Git                                                                         #
###############################################################################
# Switch to a branch, creating it if necessary
ggo() {
  git checkout -b "${1}" 2> /dev/null || git checkout "${1}"
}

# Push the current branch to origin as branch with same name
# If on branch "cool-branch": "gpo" --> git push origin cool-branch
gpo() {
  git push origin "$(git branch --show-current)"
}

gpfo() {
  git push origin --force-with-lease "$(git branch --show-current)"
}

# Apply nth stash, or "git stash apply n"
# "gstan 0" --> git stash apply stash@{0}
gstan() {
  git stash apply "stash@{${1}}"
}


###############################################################################
# Python                                                                      #
###############################################################################
# Path to current python pointed to by pyenv
whichpy() {
  pyenv which python
}


###############################################################################
# VLC                                                                         #
###############################################################################
# Cut a video into a shorter video segment.
# Start and stop time are in seconds.
# Usage: cutvideo $source_video $destination_video $start_time $stop_time
#        cutvideo ~/foo.mp4 ~/foo-cut.mp4 0 60
cutvideo() {
  vlc ${1} --start-time=${3} --stop-time=${4} --sout "#gather:std{access=file,dst=${2}}" --sout-keep vlc://quit
}


###############################################################################
# FZF                                                                         #
# https://sourabhbajaj.com/mac-setup/iTerm/fzf.html                           #
###############################################################################
# fcommand - fzf to find a command's definition
fcommand() {
  echo $(which $(compgen -c | fzf))
}

# fenv - fuzzy search for environment variables and echo selection's value
fenv() {
  echo "$(env | fzf)"
}

# fvar - fuzzy search for shell variables and echo selection's value
fvar() {
  var_name=$(compgen -v | fzf)
  echo "${var_name}=${(P)var_name}"
}

# fcd - cd to selected directory
fcd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fhistory - search in your command history and execute selected command
# NOTE: Ctrl-R does this better
fhistory() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# ch - browse chrome history
ch() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  cp -f ~/Library/Application\ Support/Google/Chrome/Profile\ 1/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}


###############################################################################
# Docker                                                                      #
###############################################################################
# Start an interactive bash session in a running docker container
dockbash() {
  docker exec -it "$1" bash
}
